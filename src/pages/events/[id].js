import Head from 'next/head'
import InformationCard from '@/components/InformationCard'
import QrCard from '@/components/QrCard'
import ParticaptionCard from '@/components/ParticaptionCard'
import Feeds from '@/components/Feeds'
import Modal from 'react-modal'
import { useRouter } from 'next/router'
import ProfileSettingsModal from '@/components/ProfileSettingsModal'
import CreateEventModal from '@/components/CreateEventModal'
import PasswordChangeModal from '@/components/PasswordChangeModal'
import DeleteAccount from '@/components/DeleteAccount'
import { useEffect } from 'react'
import { socket } from '@/socket'
import { useSession } from "next-auth/react"
import { Chart as ChartJS, ArcElement, Tooltip } from "chart.js";
import { Doughnut } from "react-chartjs-2";
import Card from '@/components/Card'
ChartJS.register(ArcElement, Tooltip);
export const data = {
    labels: ["Javascript", "Python", "Java", "C++"],
    datasets: [{
        data: [32, 8, 12, 48],
        borderColor: [
            "rgb(251, 216,157,50%)",
            "rgb(134, 239, 172,50%)",
            "rgb(220, 187, 252,50%)",
            "rgb(177, 205, 251,50%)",
        ],
        backgroundColor: [
            "rgb(251, 216,157,50%)",
            "rgb(134, 239, 172,50%)",
            "rgb(220, 187, 252,50%)",
            "rgb(177, 205, 251,50%)",
        ],
        borderWidth: 2,
    }],
};
export default function Events({ eventData }) {
    Modal.setAppElement("#__next");
    const router = useRouter()
    const { data: session } = useSession()
    const eventId = eventData?.id
    if (!eventData) {
        return <div>Loading</div>
    }

    const joinEvent = () => {
        socket.emit("partipicant", { roomId: eventId })
    }
    useEffect(() => {
        joinEvent()
    }, [])
    return (
        <>
            <Head>
                <title>Hive</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className='grid grid-cols-12 sm:gap-x-8 gap-y-8 my-10 sm:my-0 sm:gap-y-0'>
                <div className='col-span-12 mx-auto sm:col-span-3 sm:order-1 mt-40 sm:mt-0'>
                    <InformationCard eventData={eventData} />
                    <QrCard eventCode={eventData.code} />
                </div>
                <div className="col-span-12 sm:col-span-6 order-first sm:order-2">
                    <Feeds />
                </div>
                {
                    eventData.createdBy.id === session?.user?.id &&
                    <div className="sm:col-span-3 hidden sm:flex sm:order-3 sm:flex-col sm:justify-between">
                        <ParticaptionCard eventData={eventData} />
                        <Card classname={"flex flex-col py-10"}>
                            <div className='col-span-12'>
                                <h6 className='text-xl font-bold text-center'>
                                    Anket Sonuçları
                                </h6>
                            </div>
                            <div className='col-span-12 mt-10'>
                                <Doughnut data={data} width={200} height={200}/>
                            </div>
                        </Card>
                    </div>
                }
                <Modal
                    isOpen={!!router.query.profile}
                    onRequestClose={() => router.push(`/events/${eventId}`)}
                    className="bg-transparent z-20"
                >
                    <ProfileSettingsModal />
                </Modal>
                <Modal
                    isOpen={!!router.query.password}
                    onRequestClose={() => router.push(`/events/${eventId}`)}
                    className="bg-transparent z-20"
                >
                    <PasswordChangeModal />
                </Modal>
                <Modal
                    isOpen={!!router.query.account}
                    onRequestClose={() => router.push(`/events/${eventId}`)}
                    className="bg-transparent z-20"
                >
                    <DeleteAccount />
                </Modal>
                <Modal
                    isOpen={!!router.query.event}
                    onRequestClose={() => router.push(`/events/${eventId}`)}
                    className="bg-transparent z-20"
                >
                    <CreateEventModal />
                </Modal>
            </main >
        </>
    )
}

export async function getServerSideProps(context) {
    // Fetch data from external API
    const eventCode = context.query.id
    const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/rooms/${eventCode}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
        },
    })
    const data = await res.json()
    if (data.error) {
        return {
            notFound: true,
        }
    }

    return { props: { eventData: data } }
}